// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String  @id @db.VarChar(40)
  username            String  @unique @db.VarChar(50)
  mobilePhoneNumber   String? @unique @db.VarChar(20)
  mobilePhoneVerified Boolean @default(false)
  nickname            String? @db.VarChar(30)
  password            String? @db.VarChar(40)
  avatar              String? @db.LongText
  email               String? @db.VarChar(255)
  emailVerified       Boolean @default(false)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userRoles UserRole[]
  Bot       Bot[]
}

enum UserRoleType {
  SystemAdmin
  Admin
}

model UserRole {
  id   String       @id @db.VarChar(40)
  type UserRoleType

  userId String @db.VarChar(40)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bot {
  id         String  @id @db.VarChar(40)
  name       String  @db.VarChar(255)
  scanQrcode String? @db.VarChar(255)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userId          String            @db.VarChar(40)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  BotContact      BotContact[]
  BotRoom         BotRoom[]
  AutoReplyConfig AutoReplyConfig[]
}

// ! --- 本地化存储的必要性模型 ---
enum BotContactGender {
  Unknown
  Male
  Female
}

enum BotContactType {
  Unknown
  Individual
  Official
  Corporation
}

model BotContact {
  id      String           @id @db.VarChar(40)
  name    String           @db.VarChar(255)
  alias   String?          @db.VarChar(255)
  address String?          @db.VarChar(255)
  gender  BotContactGender
  type    BotContactType

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  bot           Bot             @relation(fields: [botId], references: [id])
  botId         String          @db.VarChar(40)
  BotMessage    BotMessage[]
  BotRoomMember BotRoomMember[]
}

model BotRoom {
  id       String  @id @db.VarChar(40)
  topic    String  @db.VarChar(255)
  announce String? @db.VarChar(255)
  alias    String? @db.VarChar(255)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  bot           Bot             @relation(fields: [botId], references: [id])
  botId         String          @db.VarChar(40)
  BotRoomMember BotRoomMember[]
}

model BotRoomMember {
  botContactid String     @db.VarChar(40)
  category     BotContact @relation(fields: [botContactid], references: [id], onDelete: Cascade)
  botRoomId    String     @db.VarChar(40)
  recording    BotRoom    @relation(fields: [botRoomId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([botContactid, botRoomId])
}

model BotMessage {
  id      String    @id @db.VarChar(40)
  // ! 保存Content具有侵犯隐私的风险, 需要斟酌保留
  content String?   @db.Text
  date    DateTime?

  createdAt    DateTime    @default(now())
  form         BotContact? @relation(fields: [botContactId], references: [id])
  botContactId String?     @db.VarChar(40)
}

// ! --- ---

enum TriggerType {
  Auto
  Event
}

enum TriggerRate {
  Once
  Always
  Custom
}

enum TriggerPeriod {
  Minute
  Hour
  Day
  Week
  Month
}

model AutoReplyConfig {
  id            String         @id @db.VarChar(40)
  name          String         @db.VarChar(40)
  content       String         @db.Text
  description   String?        @db.VarChar(255)
  priority      Int            @default(0)
  triggerType   TriggerType    @default(Auto)
  triggerRate   TriggerRate    @default(Always)
  triggerPeriod TriggerPeriod?
  triggerExpr   Json
  triggerTimes  Int            @default(0)

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  botId               String                @db.VarChar(40)
  bot                 Bot                   @relation(fields: [botId], references: [id])
  AutoReplyTriggerLog AutoReplyTriggerLog[]
}

model AutoReplyTriggerLog {
  id String @id() @db.VarChar(40)

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  autoReplyConfigId String          @db.VarChar(40)
  autoStartConfig   AutoReplyConfig @relation(fields: [autoReplyConfigId], references: [id])
}
